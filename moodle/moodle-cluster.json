{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Moodle Cluster",
  "Parameters": {
    "CorporateCidrIp": {
      "Description": "Your Company's CidrIp (to restrict traffic to be authorized ONLY from corporate office)",
      "Type": "String",
      "Default": "0.0.0.0/0"
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "Must be a valid EC2 instance type."
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 key pair to enable SSH access to the ECS instances"
    },
    "AsgMaxSize": {
      "Type": "Number",
      "Description": "Maximum size and initial desired capacity of Auto Scaling Group",
      "Default": "1"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "t2.xlarge"   : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  },
      "t2.xlarge"   : { "Arch" : "NATHVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-7a3dd76c", "HVM64" : "ami-0b33d91d", "HVMG2" : "ami-0b33d91d"},
      "us-east-2"        : {"HVM64" : "ami-c55673a0"},
      "us-west-2"        : {"PV64" : "ami-eff1028f", "HVM64" : "ami-f303fb93", "HVMG2" : "ami-ee897b8e"},
      "us-west-1"        : {"PV64" : "ami-ac85fbcc", "HVM64" : "ami-11790371", "HVMG2" : "ami-69106909"},
      "eu-west-1"        : {"PV64" : "ami-23ab2250", "HVM64" : "ami-c39604b0", "HVMG2" : "ami-936de5e0"},
      "eu-central-1"     : {"PV64" : "ami-27c12348", "HVM64" : "ami-7df01e12", "HVMG2" : "ami-8e7092e1"},
      "ap-northeast-1"   : {"PV64" : "ami-26160d48", "HVM64" : "ami-6154bb00", "HVMG2" : "ami-91809aff"},
      "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-69e92207", "HVMG2" : "NOT_SUPPORTED"},
      "ap-southeast-1"   : {"PV64" : "ami-f3dd0a90", "HVM64" : "ami-a2c111c1", "HVMG2" : "ami-3c30e75f"},
      "ap-southeast-2"   : {"PV64" : "ami-8f94b9ec", "HVM64" : "ami-d9d7f9ba", "HVMG2" : "ami-543d1137"},
      "sa-east-1"        : {"PV64" : "ami-e188018d", "HVM64" : "ami-106ee57c", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-77a46e1a", "HVM64" : "ami-05a66c68", "HVMG2" : "NOT_SUPPORTED"}
    }
  },

  "Conditions" : {
    "Is-EC2-VPC"     : { "Fn::Or" : [
      {"Fn::Equals" : [{"Ref" : "AWS::Region"}, "eu-central-1" ]},
      {"Fn::Equals" : [{"Ref" : "AWS::Region"}, "cn-north-1" ]},
      {"Fn::Equals" : [{"Ref" : "AWS::Region"}, "us-east-2" ]}
    ]},
    "Is-EC2-Classic" : { "Fn::Not" : [{ "Condition" : "Is-EC2-VPC"}]}
  },

  "Resources": {
    "CloudWatchPutMetricsRole" : {
      "Type"  : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Statement" : [ {
            "Effect" : "Allow",
            "Principal" : {
              "Service" : [ "ec2.amazonaws.com" ]
            },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/"
      }
    },
    "CloudWatchPutMetricsRolePolicy" : {
      "Type" : "AWS::IAM::Policy",
      "Properties" : {
        "PolicyName" : "CloudWatch_PutMetricData",
        "PolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "CloudWatchPutMetricData",
              "Effect": "Allow",
              "Action": ["cloudwatch:PutMetricData"],
              "Resource": ["*"]
            }
          ]
        },
        "Roles" : [ { "Ref" : "CloudWatchPutMetricsRole" } ]
      }
    },
    "CloudWatchPutMetricsInstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [ { "Ref" : "CloudWatchPutMetricsRole" } ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.32.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "Tags": [
          { "Key": "Name","Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          { "Key": "Name","Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "172.32.0.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          { "Key": "Name","Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "172.32.16.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          { "Key": "Name","Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "Subnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "172.32.32.0/20",
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          { "Key": "Name","Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          { "Key": "Name","Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "Route1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "SubnetRouteTableAssociation1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet1"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetRouteTableAssociation2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet2"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "SubnetRouteTableAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet3"
        },
        "RouteTableId": {
          "Ref": "RouteTable"
        }
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Bastion access from Corporate Network",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "CorporateCidrIp" } }
        ],
        "Tags": [
          { "Key": "Name","Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "Bastion" ] ] } }
        ]
      }
    },
    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer",
        "SecurityGroupIngress" : [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"},
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref": "CorporateCidrIp" } }
        ],
        "Tags": [
          { "Key": "Name","Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "WebServer" ] ] } }
        ]
      }
    },
    "MountTargetSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": ["WebServerSecurityGroup"],
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Security group for mount target",
        "SecurityGroupIngress": [
          { "IpProtocol" : "tcp", "FromPort" : "2049", "ToPort" : "2049", "SourceSecurityGroupId" : { "Fn::GetAtt": ["WebServerSecurityGroup","GroupId"] } }
        ],
        "Tags": [
          { "Key": "Name","Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "MountTarget" ] ] } }
        ]
      }
    },
    "DBEC2SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Condition" : "Is-EC2-VPC",
      "DependsOn": ["WebServerSecurityGroup"],
      "Properties" : {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Access from FrontEnd",
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "3306", "ToPort" : "3306", "SourceSecurityGroupId" : { "Fn::GetAtt": ["WebServerSecurityGroup","GroupId"] } }
        ],
        "Tags": [
          { "Key": "Name","Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" },"Database" ] ] } }
        ]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Condition" : "Is-EC2-Classic",
      "DependsOn": ["WebServerSecurityGroup"],
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "DBSecurityGroupIngress": {
          "EC2SecurityGroupId": { "Fn::GetAtt": ["WebServerSecurityGroup","GroupId"] }
        },
        "GroupDescription": "Access from FrontEnd"
      }
    },
    "FileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "PerformanceMode": "generalPurpose",
        "FileSystemTags": [
          { "Key": "Name", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "MountTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "FileSystem" },
        "SubnetId": { "Ref": "Subnet1" },
        "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
      }
    },
    "MountTarget2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "FileSystem" },
        "SubnetId": { "Ref": "Subnet2" },
        "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
      }
    },
    "MountTarget3": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "FileSystem" },
        "SubnetId": { "Ref": "Subnet3" },
        "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "MountConfig" : [ "setup", "mount" ]
          },
          "setup" : {
            "packages" : {
              "yum" : {
                "nfs-utils" : []
              }
            },
            "files" : {
              "/home/ec2-user/post_nfsstat" : {
                "content" : { "Fn::Join" : [ "", [
                  "#!/bin/bash\n",
                  "\n",
                  "INPUT=\"$(cat)\"\n",
                  "CW_JSON_OPEN='{ \"Namespace\": \"EFS\", \"MetricData\": [ '\n",
                  "CW_JSON_CLOSE=' ] }'\n",
                  "CW_JSON_METRIC=''\n",
                  "METRIC_COUNTER=0\n",
                  "\n",
                  "for COL in 1 2 3 4 5 6; do\n",
                  "\n",
                  " COUNTER=0\n",
                  " METRIC_FIELD=$COL\n",
                  " DATA_FIELD=$(($COL+($COL-1)))\n",
                  "\n",
                  " while read line; do\n",
                  "   if [[ COUNTER -gt 0 ]]; then\n",
                  "\n",
                  "     LINE=`echo $line | tr -s ' ' `\n",
                  "     AWS_COMMAND=\"aws cloudwatch put-metric-data --region ", { "Ref": "AWS::Region" }, "\"\n",
                  "     MOD=$(( $COUNTER % 2))\n",
                  "\n",
                  "     if [ $MOD -eq 1 ]; then\n",
                  "       METRIC_NAME=`echo $LINE | cut -d ' ' -f $METRIC_FIELD`\n",
                  "     else\n",
                  "       METRIC_VALUE=`echo $LINE | cut -d ' ' -f $DATA_FIELD`\n",
                  "     fi\n",
                  "\n",
                  "     if [[ -n \"$METRIC_NAME\" && -n \"$METRIC_VALUE\" ]]; then\n",
                  "       INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
                  "       CW_JSON_METRIC=\"$CW_JSON_METRIC { \\\"MetricName\\\": \\\"$METRIC_NAME\\\", \\\"Dimensions\\\": [{\\\"Name\\\": \\\"InstanceId\\\", \\\"Value\\\": \\\"$INSTANCE_ID\\\"} ], \\\"Value\\\": $METRIC_VALUE },\"\n",
                  "       unset METRIC_NAME\n",
                  "       unset METRIC_VALUE\n",
                  "\n",
                  "       METRIC_COUNTER=$((METRIC_COUNTER+1))\n",
                  "       if [ $METRIC_COUNTER -eq 20 ]; then\n",
                  "         # 20 is max metric collection size, so we have to submit here\n",
                  "         aws cloudwatch put-metric-data --region ", { "Ref": "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\"\n",
                  "\n",
                  "         # reset\n",
                  "         METRIC_COUNTER=0\n",
                  "         CW_JSON_METRIC=''\n",
                  "       fi\n",
                  "     fi  \n",
                  "\n",
                  "\n",
                  "\n",
                  "     COUNTER=$((COUNTER+1))\n",
                  "   fi\n",
                  "\n",
                  "   if [[ \"$line\" == \"Client nfs v4:\" ]]; then\n",
                  "     # the next line is the good stuff \n",
                  "     COUNTER=$((COUNTER+1))\n",
                  "   fi\n",
                  " done <<< \"$INPUT\"\n",
                  "done\n",
                  "\n",
                  "# submit whatever is left\n",
                  "aws cloudwatch put-metric-data --region ", { "Ref": "AWS::Region" }, " --cli-input-json \"`echo $CW_JSON_OPEN ${CW_JSON_METRIC%?} $CW_JSON_CLOSE`\""
                ] ] },
                "mode": "000755",
                "owner": "ec2-user",
                "group": "ec2-user"
              },
              "/etc/cron.d/nfsstat" : {
                "content" : { "Fn::Join" : [ "", [
                  "* * * * * root /usr/sbin/nfsstat | /home/ec2-user/post_nfsstat\n"
                ] ] },
                "owner": "root",
                "group": "root"
              }
            },
            "commands" : {
              "01_createdir" : {
                "command" : "mkdir -p /var/www/data"
              },
              "02_chmoddir" : {
                "command" : "chmod 0777 /var/www/data"
              },
              "03_fstab" : {
                "command": { "Fn::Sub":"echo \"${FileSystem}.efs.${AWS::Region}.amazonaws.com:/ /var/www/data nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0\" >> /etc/fstab" }
              }
            },
            "services" : {
              "sysvinit" : {
                "crond" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          },
          "mount" : {
            "commands" : {
              "01_mount" : {
                "command" : "mount /var/www/data"
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress" : true,
        "ImageId": {
          "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" }, {
            "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ]
          } ]
        },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [ { "Ref": "WebServerSecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "CloudWatchPutMetricsInstanceProfile" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum install -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource LaunchConfiguration ",
          "         --configsets MountConfig ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource AutoScalingGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["MountTarget1", "MountTarget2", "MountTarget3", "InternetGateway"],
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : { "Ref": "AsgMaxSize" }
        }
      },
      "Properties": {
        "VPCZoneIdentifier": [ { "Ref": "Subnet1" }, { "Ref": "Subnet2" }, { "Ref": "Subnet3" } ],
        "LaunchConfigurationName": { "Ref": "LaunchConfiguration" },
        "MinSize": "1",
        "MaxSize": { "Ref": "AsgMaxSize" },
        "DesiredCapacity": "1",
        "TargetGroupARNs": [ { "Ref": "LoadBalancerTG" } ],
        "MetricsCollection": [
          {
            "Granularity" : "1Minute",
            "Metrics" : [ "GroupInServiceInstances", "GroupTotalInstances" ]
          }
        ],
        "Tags": [
          { "Key": "Name","Value": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "WebServer" ] ] }, "PropagateAtLaunch": "true" }
        ]
      }
    },
    "LoadBalancer": {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "LoadBalancerAttributes" : [],
        "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" },"LoadBalancer" ] ] },
        "Scheme" : "internet-facing",
        "SecurityGroups" : [ { "Ref": "WebServerSecurityGroup" } ],
        "Subnets" : [{ "Ref": "Subnet1" }, { "Ref": "Subnet2" }, { "Ref": "Subnet3" }],
        "Tags" : []
      }
    },
    "LoadBalancerTG": {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckPath" :  "/",
        "HealthCheckPort" : "traffic-port",
        "HealthCheckProtocol" : "HTTP",
        "HealthCheckTimeoutSeconds" : 15,
        "HealthyThresholdCount" : 3,
        "Matcher" : { "HttpCode" : "303,200" },
        "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" },"TargetGroup" ] ] },
        "Port" : 80,
        "Protocol" : "HTTP",
        "TargetGroupAttributes" : [
          {
            "Key": "stickiness.enabled",
            "Value": "true"
          },
          {
            "Key": "stickiness.type",
            "Value": "lb_cookie"
          }
        ],
        "UnhealthyThresholdCount" : 2,
        "VpcId" : { "Ref": "VPC" }
      }
    },
    "LoadBalancerListener": {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [
          { "TargetGroupArn" : { "Ref" : "LoadBalancerTG" }, "Type" : "forward" }
        ],
        "LoadBalancerArn" : { "Ref" : "LoadBalancer" },
        "Port" : 80,
        "Protocol" : "HTTP"
      }
    }
  },

  "Outputs": {
    "LoadBalancer" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}, "/" ]]},
      "Description" : "Load Balancer URL"
    },
    
    "VPC": {
      "Description": "VPC",
      "Value": {
        "Ref": "VPC"
      }
    },

    "Subnets": {
      "Description": "Subnets",
      "Value": {
        "Fn::Join": [
          "",
          [
            { "Ref": "Subnet1" }, " (in ", { "Fn::GetAtt": [ "Subnet1", "AvailabilityZone" ] }, "), ",
            { "Ref": "Subnet2" }, " (in ", { "Fn::GetAtt": [ "Subnet2", "AvailabilityZone" ] }, "), ",
            { "Ref": "Subnet3" }, " (in ", { "Fn::GetAtt": [ "Subnet3", "AvailabilityZone" ] }, ")"
          ]
        ]
      }
    },

    "BastionSecurityGroup": {
      "Description": "Bastion Security Group",
      "Value": {
        "Ref": "BastionSecurityGroup"
      }
    },

    "FileSystemID" : {
      "Description" : "File system ID",
      "Value" :  { "Ref" : "FileSystem" }
    }
  }
}